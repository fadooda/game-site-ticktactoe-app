require('dotenv').config()
const tictactoeRoomText='Join a tictactoe game!'
const roomsNumToGenerate=30; //generate x num of rooms 
const rooms = setRooms();

/**
 * setRooms:
 * This function will generate roooms 
 * Rooms are generated by a for loop that will add keys 'TickTacToe Room: ' with an index appended to the end
 * Adding an index at the end of 'TickTacToe Room: ' will make the key unique 
 * 
 * returns:
 * The map of rooms, with room name as the key and the user list as the value
 */
function setRooms()
{
    let rooms={}
    let tictext="TickTacToe Room: "
    for (let roomNum=1; roomNum<=roomsNumToGenerate; roomNum++)
    {
        rooms[tictext+roomNum] = [] // set key to roomname and the value to an empty list
    }
    return rooms
}

module.exports = {
    /**
     * roomDetails:
     * This function will generate a list with full rooom details 
     * Rooms are generated by a for loop that will add the room name and the and the respective user list length (in addition to the const game text)
     * 
     * returns:
     * The list of rooms with full-details: the user list length in the room, the room name, and the const game text
     */
    roomDetails: function(){
            let roomdetail=[]
            for (const roomName in rooms)
            {
                roomdetail.push({
                    title: roomName,
                    text: tictactoeRoomText,
                    userCount: rooms[roomName].length
                })
            }
            return roomdetail
        },

    /**
     * joinRoom:
     * This function will join a user to a room (the list value) in the rooms map
     * join only if there is less than 2 users in the room
     * 
     * returns:
     * If the amount of users in the selected room is less then 2 
     * Then add the user to the rooms list
     * Return True
     * 
     * Else if there is 2 or more users in the room
     * Return false
     */
    joinRoom: function({ id, room, user }){

        if (rooms[room].length>=2)
        {
            return false;
        }else{
            rooms[room].push({id,user})
            return true;
        }
    },

    /**
     * leaveRoom:
     * This function will remove a user from a room (the list value) in the rooms map
     * 
     * returns:
     * If the amount of users in the selected room is less then 2 
     * Then add the user to the rooms list
     * Return True
     * 
     * Else if there is 2 or more users in the room
     * 
     * Return false
     */
    leaveRoom: function(id){
        let roomUserIn
        for (const [room, users] of Object.entries(rooms)) {
            rooms[room]=users.filter(function(user) {
                 if(user.id === id){
                     roomUserIn=room
                    }
                 return  user.id !== id 
            });
          }
        return roomUserIn
    },

    /**
     * getUsersInRoom:
     * This function will return the users stored in a selected room
     */
    getUsersInRoom: function(roomName){
        let userlist=[]
        let unfiltereduserlist=rooms[roomName]
        console.log(unfiltereduserlist)
        for(let index=0; index <unfiltereduserlist.length;index++){
            
            console.log(unfiltereduserlist[index].user)
            userlist.push(unfiltereduserlist[index].user)
        }
        return userlist
    }
}